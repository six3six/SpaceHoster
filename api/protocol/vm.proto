syntax = "proto3";

package protocol;
option go_package = "github.com/six3six/SpaceHoster/protocol";

import "google/api/annotations.proto";

message VmSpecification {
  int32 core = 1;
  int32 memory = 2;
  int32 storage = 3;
}

message CreateVmRequest {
  string token = 1;
  string name = 2;
  VmSpecification specification = 3;
}

message CreateVmResponse {
  enum Code {
    OK = 0;
    BAD_TOKEN = 1;
    NOT_ENOUGH_RESOURCES = 2;
  }
  Code code = 1;
  string name = 2;
  int32 id = 3;
}

message VmRequest {
  string token = 1;
  int32 id = 2;
}

message StatusVmResponse {
  enum Code {
    OK = 0;
    BAD_TOKEN = 1;
    NOT_ALLOWED = 2;
  }
  Code code = 1;
  enum Status {
    STOPPED = 0;
    PREPARED = 1;
    CREATED = 2;
    SETUP = 3;
    RUNNING = 5;
    ABORTED = 6;
  }
  Status status = 2;
  string message = 3;
}

message JustTokenRequest {
  string token = 1;
}

message ListVmResponse {
  enum Code {
    OK = 0;
    BAD_TOKEN = 1;
  }
  Code code = 1;
  repeated int32 id = 2;
}

message FreeResourcesResponse {
  enum Code {
    OK = 0;
    BAD_TOKEN = 1;
  }
  Code code = 1;
  VmSpecification free = 2;
  VmSpecification total = 3;
}



service VmService {
  rpc Create(CreateVmRequest) returns (CreateVmResponse) {
    option (google.api.http) = {
      post: "/v1/vm/create"
      body: "*"
    };
  };
  rpc Status(VmRequest) returns (StatusVmResponse) {
    option (google.api.http) = {
      post: "/v1/vm/status"
      body: "*"
    };
  };
  rpc List(JustTokenRequest) returns (ListVmResponse) {
    option (google.api.http) = {
      post: "/v1/vm/list"
      body: "*"
    };
  };
  rpc FreeResources(JustTokenRequest) returns (FreeResourcesResponse) {
    option (google.api.http) = {
      post: "/v1/vm/free"
      body: "*"
    };
  };
  rpc Start(VmRequest) returns (StatusVmResponse) {
    option (google.api.http) = {
      post: "/v1/vm/start"
      body: "*"
    };
  };
  rpc Stop(VmRequest) returns (StatusVmResponse) {
    option (google.api.http) = {
      post: "/v1/vm/stop"
      body: "*"
    };
  };
  rpc Restart(VmRequest) returns (StatusVmResponse) {
    option (google.api.http) = {
      post: "/v1/vm/restart"
      body: "*"
    };
  };
  rpc Delete(VmRequest) returns (StatusVmResponse) {
    option (google.api.http) = {
      post: "/v1/vm/delete"
      body: "*"
    };
  };
}
